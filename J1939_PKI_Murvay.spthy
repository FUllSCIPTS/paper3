theory test

begin

builtins: hashing, symmetric-encryption, asymmetric-encryption, signing

functions: h1/1, h2/1, sign/2, verify/3, pk/1



//long-term keys are registered

rule register_longterm_keys:

[Fr(~x), Fr(~y), Fr(~z)]

--[Role('SeCU'),Role('ECU'), Role('OEM')]->

[!LtkSe($SeCU,~x),!LtkEc($ECU,~y),!LtkOE($ECU,~z),!PkSe($SeCU,pk(~x)),!PkE($ECU,pk(~y)),!PkEO($OEM,pk(~z)),Out(<pk(~x),pk(~y),pk(~z)>)]

//Certificate generation by OEM

rule certificate_generation:

let 
Cert_SeCU=sign(pk(x),z)
Cert_ECU=sign(pk(y),z)

in

[!PkSe($SeCU,pk(x)),!PkE($ECU,pk(y)),!PkEO($OEM,pk(z))]

--[Role('SeCU'),Role('ECU'), Role('OEM')]->

[!CerSeCU($SeCU,Cert_SeCU),!CerECU($ECU,Cert_ECU)]




//ECU and SeCU are initialised by binding with long-term keys

rule initialise_ECU:

[Fr(~id),!LtkEc(ECU,y),!PkSe(SeCU,pk(x)),!PkE(ECU,pk(y)),!PkEO(OEM,pk(z)),!CerSeCU(SeCU,Cert_SeCU),!CerECU(ECU,Cert_ECU)]

--[Create(ECU, ~id), 
Role('ECU') ]->

[St_ECU_1(ECU, ~id,y,pk(x),pk(y),pk(z),Cert_SeCU,Cert_ECU, SeCU)]

rule initialise_SeCU:

[ Fr(~id),!LtkSe(SeCU,x),!PkSe(SeCU,pk(x)),!PkE(ECU,pk(y)),!PkEO(OEM,pk(z)),!CerSeCU(SeCU,Cert_SeCU),!CerECU(ECU,Cert_ECU)]

--[Create(SeCU, ~id), 
Role('SeCU') ]->

[St_SeCU_1(SeCU, ~id, x,pk(y),pk(x),pk(z),Cert_SeCU,Cert_ECU,ECU)]





//ECU sends first message

rule send_1:


[Fr(~rand),!CerECU(ECU,Cert_ECU),St_ECU_1(ECU, ~id,y,pk(x),pk(y),pk(z),Cert_SeCU,Cert_ECU, SeCU)]
--[Send(<ECU,<Cert_ECU,~rand>>),
 Honest(ECU),
 Honest(SeCU), 
Role('ECU'),Commit_strongA(ECU,SeCU,~rand)]->
[St_ECU_2(ECU, ~id,y,pk(x),pk(y),pk(z),Cert_SeCU,Cert_ECU,~rand, SeCU), Out(<Cert_ECU,~rand>)]


rule Recv_1:


[In(<Cert_ECU,rand>),!PkE(ECU,pk(y)),!PkEO(OEM,pk(z)),St_SeCU_1(SeCU, ~id, x,pk(y),pk(x),pk(z),Cert_SeCU,Cert_ECU,ECU)]
--[Receive(<SeCU,<Cert_ECU,rand>>),
Verify(SeCU,verify(Cert_ECU,pk(x),pk(z))),
 Honest(ECU), 
Honest(SeCU),
 Role('SeCU'),Running_strongA(SeCU,ECU,rand) ]->
[St_SeCU_2(SeCU, ~id, x,pk(y),pk(x),pk(z),Cert_SeCU,Cert_ECU,rand,ECU)]


rule send_2:

let
Sign_SeCU=sign(<pk(x),pk(y),~K_ses,~K_sync,rand>,y)

Cypher=aenc(<Sign_SeCU,~K_ses,~K_sync>,pk(x))
in

[Fr(~K_ses),Fr(~K_sync),St_SeCU_2(SeCU, ~id, x,pk(y),pk(x),pk(z),Cert_SeCU,Cert_ECU,rand,ECU)]

--[Send(<SeCU,<pk(y),Cypher>>),
 Honest(ECU),
 Honest(SeCU), 
Role('SeCU'),Commit_strongB(SeCU,ECU,rand)]->

[St_SeCU_3(SeCU, ~id, x,pk(y),pk(x),pk(z),Cert_SeCU,Cert_ECU,rand,~K_ses,~K_sync,ECU), Out(<pk(y),Cypher>)]

rule Recv_2:

let
Sign_SeCU=sign(<pk(x),pk(y),K_ses,K_sync,rand>,y)

Cypher=aenc(<Sign_SeCU,K_ses,K_sync>,pk(x))
in

[In(<pk(y),Cypher>),St_ECU_2(ECU, ~id,y,pk(x),pk(y),pk(z),Cert_SeCU,Cert_ECU,rand, SeCU)]

--[Receive(<ECU,<pk(y),Cypher>>),
 Honest(ECU),
 Honest(SeCU), 
Role('ECU'),Decrypt(ECU,adec(Cypher,x)),
Verifysig(ECU,verify(Sign_SeCU,<pk(x),pk(y),K_ses,K_sync,rand>,pk(y))),Running_strongB(ECU,SeCU,rand) ]->

[St_ECU_3(ECU, ~id,y,pk(x),pk(y),pk(z),Cert_SeCU,Cert_ECU,rand,K_ses,K_sync, SeCU)]



rule send_3:
let
MAC_1=h(<K_sync,~rand1>)

in

[Fr(~rand1),St_ECU_3(ECU, ~id,y,pk(x),pk(y),pk(z),Cert_SeCU,Cert_ECU,rand,K_ses,K_sync, SeCU)]
--[Send(<ECU,<~rand1,MAC_1>>),
 Honest(ECU),
 Honest(SeCU), 
Role('SeCU')]->
[Out(<~rand1,MAC_1>),St_ECU_4(ECU, ~id,y,pk(x),pk(y),pk(z),Cert_SeCU,Cert_ECU,rand,K_ses,K_sync,~rand1, SeCU)]


rule Recv_3:

let
MAC_1=h(<K_sync,rand1>)

in

[In(<rand1,MAC_1>),St_SeCU_3(SeCU, ~id, x,pk(y),pk(x),pk(z),Cert_SeCU,Cert_ECU,rand,K_ses,K_sync,ECU)]
--[Receive(<SeCU,<rand1,MAC_1>>),
 Honest(ECU),
 Honest(SeCU), 
Role('SeCU')]->

[St_SeCU_4(SeCU, ~id, x,pk(y),pk(x),pk(z),Cert_SeCU,Cert_ECU,rand,K_ses,K_sync,rand1,ECU)]


rule send_4:
let
MAC_2=h(<K_sync,~t_SeCU,rand1>)
in
[Fr(~t_SeCU),St_SeCU_4(SeCU, ~id, x,pk(y),pk(x),pk(z),Cert_SeCU,Cert_ECU,rand,K_ses,K_sync,rand1,ECU)]
--[Send(<SeCU,<~t_SeCU,MAC_2>>),
 Honest(ECU),
 Honest(SeCU), 
Role('SeCU')]->

[Out(<~t_SeCU,MAC_2>),St_SeCU_5(SeCU, ~id, x,pk(y),pk(x),pk(z),Cert_SeCU,Cert_ECU,rand,K_ses,K_sync,rand1,~t_SeCU,ECU)]

rule Recv_4:
let
MAC_2=h(<K_sync,t_SeCU,rand1>)
in
[In(<t_SeCU,MAC_2>),St_ECU_4(ECU, ~id,y,pk(x),pk(y),pk(z),Cert_SeCU,Cert_ECU,rand,K_ses,K_sync,rand1, SeCU)]
--[Receive(<ECU,<t_SeCU,MAC_2>>),
 Honest(ECU),
 Honest(SeCU), 
Role('SeCU')]->
[St_ECU_5(ECU, ~id,y,pk(x),pk(y),pk(z),Cert_SeCU,Cert_ECU,rand,K_ses,K_sync,rand1,t_SeCU, SeCU)]







//	SECURITY PROPERTIES


lemma executable:
exists-trace
"(Ex ECU SeCU  m #i #j. Send(<ECU,m>)@i & Receive(<SeCU,m>) @ j & i <j )<=>T"


lemma aliveness_ECU:
" All rand ECU SeCU #i .
        Commit_strongA(ECU,SeCU,rand)@ i
        ==>
        (Ex id #j. Create(SeCU,id)@j)"

lemma aliveness_SeCU:
" All rand ECU SeCU #i .
        Commit_strongB(SeCU,ECU,rand)@ i
        ==>
        (Ex id #j. Create(ECU,id)@j)"

lemma weak_agreement_ECU:
" All rand ECU SeCU #i .
        Commit_strongA(ECU,SeCU,rand)@ i
        ==>
        (Ex rand #j. Running_strongA(SeCU,ECU,rand)@ j)"

lemma weak_agreement_SeCU:
" All rand ECU SeCU #i .
        Commit_strongB(ECU,SeCU,rand)@ i
        ==>
        (Ex rand #j. Running_strongB(SeCU,ECU,rand)@ j)"

lemma Non_injective_agreement_ECU:
" All rand ECU SeCU #i .
        Commit_strongA(ECU,SeCU,rand)@ i
        ==>
        (Ex  #j. Running_strongA(SeCU,ECU,rand)@ j)"

lemma Non_injective_agreement_SeCU:
" All rand ECU SeCU #i .
        Commit_strongB(ECU,SeCU,rand)@ i
        ==>
        (Ex  #j. Running_strongB(SeCU,ECU,rand)@ j)"


lemma Injectiveagreement_ECU:
    " All rand ECU SeCU #i.
        Commit_strongA(ECU,SeCU,rand)@ i
        ==>
        (Ex #j . Running_strongA(SeCU,ECU,rand) @ j 
          & j < i 
& not (Ex ECU2 SeCU2 #i2. Commit_strongA(ECU2,SeCU2,rand) @ i2
 & not (#i2 = #i)))
    "

lemma Injectiveagreement_SeCU:
    " All rand ECU SeCU #i.
        Commit_strongB(SeCU,ECU,rand)@ i
        ==>
        (Ex #j . Running_strongB(ECU,SeCU,rand) @ j 
          & j < i 
& not (Ex ECU2 SeCU2 #i2. Commit_strongB(SeCU2,ECU2,rand) @ i2
 & not (#i2 = #i)))
    "







end





